"""apkg the packaging automation tool

Usage: apkg <command> [<args>...]
       apkg <command> --help
       apkg [--help | --version]

Commands:
  status                 WIP: Show status of current project
  make-archive                Create dev archive from current project state
  get-archive           TODO: Download upstream source archive
  make-source-package   TODO: Create source package (files to build package from)
  build-local           TODO: Build package locally

Options:
  -h --help     Show help screen, can be used after a command
  --version     Show version
"""
# TODO: Commands could be autogenerated but I don't want to slowdown
#       every invocation by parsing all commands.* modules.
#       A script for updating the __doc__ string here that is run
#       when dev adds a new command might be a decent compromise.

from docopt import docopt
import sys

from . import __version__
from . import commands  # noqa: F401 (dynamic import)
from . import exception
from . import log


def cmd2mod(command):
    """Translate command name to module name"""
    return command.replace('-', '_')


def run_command(command, cargs):
    modname = 'apkg.commands.%s' % cmd2mod(command)
    mod = __import__(modname, fromlist=[''])
    return mod.run_command(cargs)


def apkg(*cargs):
    """
    apkg CLI interface

    Execute apkg command with specified arguments
    and return shell friendly exit code.

        py> apkg('command', 'argument')

    is equivalent to

        $> apkg command argument

    Individual commands map to functions in commands module.
    """
    # print full help when no commands/options are supplied
    if len(cargs) == 0:
        cargs = cargs + ('--help',)

    args = docopt(__doc__,
                  argv=cargs,
                  version=__version__,
                  options_first=True)

    code = 1
    try:
        if args['<command>']:
            return run_command(args['<command>'], cargs)
    except exception.CommandFailed as ex:
        # this was logged already
        code = ex.exit_code
    except exception.ApkgException as ex:
        print()
        print(log.T.bold_yellow(str(ex)))
        code = ex.exit_code

    return code


def main():
    """
    apkg console_scripts entry point
    """
    cargs = sys.argv[1:]
    sys.exit(apkg(*cargs))


if __name__ == '__main__':
    main()
